apiVersion: v1
kind: Template
metadata:
  name: KIRK_TEMPLATE
labels:
  app: kirk
parameters:
  - name: DB_SECRETS_NAME
    description: "Name of the postgres database"
    value: pgdb-secrets
  - name: PGDB_PORT
    value: '666'
    description: "Name of the port that the db is listening to"
  - name: PGDB_NAME
    description: "Name of the postgres database"
    value: bones_pgdb
  - name: PGDB_USER
    description: "Name of the postgres database user for app schema"
    value: bones_user
  - name: PGDB_PASSWORD
    description: "Name of the postgres database user password for app schema"
    value: bones_password
  - name: NAME
    description: "base name for the all objects"
    value: kirk
  - name: ENV
    description: "this is dev|test|prd"
    value: dev
  - name: "CONTAINER_SRC"
    description: "path to the container/image stream"
    value: docker.pkg.github.com/franTarkenton/kirk/kirk
    #value: docker.pkg.github.com/bcgov/kirk/kirk
  - name: "CONTAINER_SRC_SECRET_NAME"
    description: "name of the secret that is used to retrieve the container, require by github hosted packages (images)"
    value: kirk-image-secret
  - name: "DEPLOY_NAMESPACE"
    description: "The namespace / project where the template is to be deployed"
    value: dbc-kirk-dev
  - name: "IMAGE_LABEL"
    description: "the label that identifies what image to deploy"
    value: "latest"
#  - name: "ROUTE_HOST"
#    description: "the route to be used when creating the Kong based route"
#    value: "bcdc-smk.data.gov.bc.ca"
  - name: "GITHUB_PACKAGE_ACCESS_JSON_BASE64"
    description: "The 64 bit encoded json with the secret defs for access to GITHUB packages"
  - name: "PVC_NAME"
    value: 'postgresql-pvc'
    description: "the name of the persistent volume claim that is going to be used for the database persistent storage"
  - name: "POSTGRES_VOLUME_NAME"
    value: 'postgresql-volume'
    description: "the name of the volume used by the postgres database"

objects:
  - kind: Secret
    apiVersion: v1
    data:
      .dockerconfigjson: >-
        ${GITHUB_PACKAGE_ACCESS_JSON_BASE64}
    metadata:
      name: ${CONTAINER_SRC_SECRET_NAME}
      namespace: ${DEPLOY_NAMESPACE}
    type: kubernetes.io/dockerconfigjson

  - kind: Service
    apiVersion: v1
    metadata:
      annotations:
        template.openshift.io/expose-uri: 'postgres://{.spec.clusterIP}:{.spec.ports[?(.name=="postgresql")].port}'
      name: postgresql-svc
      namespace: ${DEPLOY_NAMESPACE}
    spec:
      ports:
        - name: ${PGDB_NAME}
          port: ${PGDB_PORT}
          protocol: TCP
          targetPort: ${PGDB_PORT}
      selector:
        name: ${PGDB_NAME}
      sessionAffinity: None
      type: ClusterIP

  # postgresql secrets
  - apiVersion: v1
    kind: Secret
    data:
      database-name: ${PGDB_NAME}
      database-password: ${PGDB_PASSWORD}
      database-user: ${PGDB_USER}
    metadata:
      annotations:
        template.openshift.io/expose-database_name: '{.data[''database-name'']}'
        template.openshift.io/expose-password: '{.data[''database-password'']}'
        template.openshift.io/expose-username: '{.data[''database-user'']}'
      labels:
        template: postgresql-persistent-template
      name: ${DB_SECRETS_NAME}
      namespace: ${DEPLOY_NAMESPACE}
    type: Opaque

  - apiVersion: v1
    kind: PersistentVolumeClaim
    metadata:
      annotations:
        pv.kubernetes.io/bind-completed: "yes"
        pv.kubernetes.io/bound-by-controller: "yes"
        volume.beta.kubernetes.io/storage-provisioner: netapp.io/trident
      finalizers:
      - kubernetes.io/pvc-protection
      # labels:
      #   template: postgresql-persistent-template
      name: ${PVC_NAME}
      namespace: ${DEPLOY_NAMESPACE}
    spec:
      accessModes:
      - ReadWriteOnce
      resources:
        requests:
          storage: 1Gi
      storageClassName: netapp-file-standard
      volumeName: ${POSTGRES_VOLUME_NAME}

  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      annotations:
        template.alpha.openshift.io/wait-for-ready: 'true'
      labels:
        template: postgresql-persistent-template
      name: pgsql
      namespace: ${DEPLOY_NAMESPACE}
    spec:
      replicas: 1
      selector:
        name: postgresql
      strategy:
        activeDeadlineSeconds: 21600
        recreateParams:
          timeoutSeconds: 600
        resources: {}
        type: Recreate
      template:
        metadata:
          creationTimestamp: null
          labels:
            name: postgresql
        spec:
          containers:
            - env:
                - name: POSTGRESQL_USER
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: ${DB_SECRETS_NAME}
                - name: POSTGRESQL_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: ${DB_SECRETS_NAME}
                - name: POSTGRESQL_DATABASE
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: ${DB_SECRETS_NAME}
              image: >-
                docker-registry.default.svc:5000/openshift/postgresql
              imagePullPolicy: IfNotPresent
              livenessProbe:
                exec:
                  command:
                    - /bin/sh
                    - '-i'
                    - '-c'
                    - pg_isready -h 127.0.0.1 -p ${PGDB_PORT}
                failureThreshold: 3
                initialDelaySeconds: 30
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              name: postgresql
              ports:
                - containerPort: "${PGDB_PORT}"
                  protocol: TCP
              readinessProbe:
                exec:
                  command:
                    - /bin/sh
                    - '-i'
                    - '-c'
                    - >-
                      psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d
                      $POSTGRESQL_DATABASE -c 'SELECT 1'
                failureThreshold: 3
                initialDelaySeconds: 5
                periodSeconds: 10
                successThreshold: 1
                timeoutSeconds: 1
              resources:
                limits:
                  memory: 512Mi
              securityContext:
                capabilities: {}
                privileged: false
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
              volumeMounts:
                - mountPath: /var/lib/pgsql/data
                  name: ${POSTGRES_VOLUME_NAME}
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
          volumes:
            - name: ${POSTGRES_VOLUME_NAME}
              persistentVolumeClaim:
                claimName: ${PVC_NAME}
      test: false
      triggers:
        - imageChangeParams:
            automatic: true
            containerNames:
              - postgresql
            from:
              kind: ImageStreamTag
              name: 'postgresql:9.6'
              namespace: openshift
            lastTriggeredImage: >-
              docker-registry.default.svc:5000/openshift/postgresql
          type: ImageChange
        - type: ConfigChange
      latestVersion: 3
      observedGeneration: 4
      readyReplicas: 1
      replicas: 1
      unavailableReplicas: 0
      updatedReplicas: 0

  - apiVersion: apps.openshift.io/v1
    kind: DeploymentConfig
    metadata:
      # annotations:
      #   openshift.io/generated-by: OpenShiftWebConsole
      labels:
        app: ${NAME}-${ENV}
      name:  ${NAME}-${ENV}
      namespace: ${DEPLOY_NAMESPACE}
    spec:
      replicas: 2
      selector:
        app:  ${NAME}-${ENV}
        deploymentconfig:  ${NAME}-${ENV}
      strategy:
        activeDeadlineSeconds: 21600
        resources: {}
        rollingParams:
          intervalSeconds: 1
          maxSurge: 25%
          maxUnavailable: 25%
          timeoutSeconds: 600
          updatePeriodSeconds: 1
        type: Rolling
        spec:
          containers:
            - env:
                - name: DJANGO_DEBUG
                  value: 'False'
                - name: POSTGRES_PORT
                  value: ${PGDB_PORT}
                - name: POSTGRES_DB_NAME
                  valueFrom:
                    secretKeyRef:
                      key: database-name
                      name: ${DB_SECRETS_NAME}
                - name: POSTGRES_PASSWORD
                  valueFrom:
                    secretKeyRef:
                      key: database-password
                      name: ${DB_SECRETS_NAME}
                - name: POSTGRES_USER_NAME
                  valueFrom:
                    secretKeyRef:
                      key: database-user
                      name: ${DB_SECRETS_NAME}
                - name: POSTGRES_HOST
                  value: postgresql
              image: "${CONTAINER_SRC}:${IMAGE_LABEL}"
              #  docker-registry.default.svc:5000/dbc-kirk-tools/kirk@sha256:76122a9d55355799b55e800589f8de223e448ec750abf715548711a6b4d0147b
              imagePullPolicy: Always
              name: kirk
              ports:
                - containerPort: 8000
                  protocol: TCP
              resources: {}
              terminationMessagePath: /dev/termination-log
              terminationMessagePolicy: File
          dnsPolicy: ClusterFirst
          restartPolicy: Always
          schedulerName: default-scheduler
          securityContext: {}
          terminationGracePeriodSeconds: 30
      test: false
      # triggers:
      #   - type: ConfigChange
      #   - imageChangeParams:
      #       automatic: true
      #       containerNames:
      #         - kirk
      #       from:
      #         kind: ImageStreamTag
      #         name: 'kirk:latest'
      #         namespace: dbc-kirk-tools
      #       lastTriggeredImage: >-
      #         docker-registry.default.svc:5000/dbc-kirk-tools/kirk@sha256:76122a9d55355799b55e800589f8de223e448ec750abf715548711a6b4d0147b
      #     type: ImageChange
      # details:
      #   causes:
      #     - imageTrigger:
      #         from:
      #           kind: DockerImage
      #           name: >-
      #             docker-registry.default.svc:5000/dbc-kirk-tools/kirk@sha256:76122a9d55355799b55e800589f8de223e448ec750abf715548711a6b4d0147b
      #       type: ImageChange
      #   message: image change